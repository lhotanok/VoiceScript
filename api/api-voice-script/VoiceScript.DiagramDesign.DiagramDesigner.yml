### YamlMime:ManagedReference
items:
- uid: VoiceScript.DiagramDesign.DiagramDesigner
  commentId: T:VoiceScript.DiagramDesign.DiagramDesigner
  id: DiagramDesigner
  parent: VoiceScript.DiagramDesign
  children:
  - VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram(IReadOnlyList{Class})
  langs:
  - csharp
  - vb
  name: DiagramDesigner
  nameWithType: DiagramDesigner
  fullName: VoiceScript.DiagramDesign.DiagramDesigner
  type: Class
  source:
    id: DiagramDesigner
    path: ''
    startLine: 930
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.DiagramDesign
  syntax:
    content: public class DiagramDesigner
    content.vb: Public Class DiagramDesigner
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram(IReadOnlyList{Class})
  commentId: M:VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram(IReadOnlyList{Class})
  id: CreateGraphDiagram(IReadOnlyList{Class})
  parent: VoiceScript.DiagramDesign.DiagramDesigner
  langs:
  - csharp
  - vb
  name: CreateGraphDiagram(IReadOnlyList<Class>)
  nameWithType: DiagramDesigner.CreateGraphDiagram(IReadOnlyList<Class>)
  fullName: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram(IReadOnlyList<Class>)
  type: Method
  source:
    id: CreateGraphDiagram
    path: ''
    startLine: 953
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.DiagramDesign
  syntax:
    content: public Graph CreateGraphDiagram(IReadOnlyList<Class> classes)
    parameters:
    - id: classes
      type: IReadOnlyList{Class}
    return:
      type: Graph
    content.vb: Public Function CreateGraphDiagram(classes As IReadOnlyList(Of  Class)) As Graph
  overload: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram*
  nameWithType.vb: DiagramDesigner.CreateGraphDiagram(IReadOnlyList(Of Class))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram(IReadOnlyList(Of Class))
  name.vb: CreateGraphDiagram(IReadOnlyList(Of Class))
references:
- uid: VoiceScript.DiagramDesign
  commentId: N:VoiceScript.DiagramDesign
  name: VoiceScript.DiagramDesign
  nameWithType: VoiceScript.DiagramDesign
  fullName: VoiceScript.DiagramDesign
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram*
  commentId: Overload:VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram
  name: CreateGraphDiagram
  nameWithType: DiagramDesigner.CreateGraphDiagram
  fullName: VoiceScript.DiagramDesign.DiagramDesigner.CreateGraphDiagram
- uid: IReadOnlyList{Class}
  commentId: '!:IReadOnlyList{Class}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Class>
  nameWithType: IReadOnlyList<Class>
  fullName: IReadOnlyList<Class>
  nameWithType.vb: IReadOnlyList(Of Class)
  fullName.vb: IReadOnlyList(Of Class)
  name.vb: IReadOnlyList(Of Class)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Class
    name: Class
    nameWithType: Class
    fullName: Class
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Class
    name: Class
    nameWithType: Class
    fullName: Class
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Graph
  commentId: '!:Graph'
  isExternal: true
  name: Graph
  nameWithType: Graph
  fullName: Graph
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
