### YamlMime:ManagedReference
items:
- uid: DiagramModel.Components.Method
  commentId: T:DiagramModel.Components.Method
  id: Method
  parent: DiagramModel.Components
  children:
  - DiagramModel.Components.Method.#ctor(System.String,DiagramModel.Components.Component)
  - DiagramModel.Components.Method.AddChild(DiagramModel.Components.Component)
  - DiagramModel.Components.Method.Clone
  - DiagramModel.Components.Method.GetOptionalParameters
  - DiagramModel.Components.Method.GetParameters
  - DiagramModel.Components.Method.GetRequiredParameters
  - DiagramModel.Components.Method.GetReturnType
  - DiagramModel.Components.Method.GetUniqueTypeName
  - DiagramModel.Components.Method.GetVisibility
  - DiagramModel.Components.Method.TypeName
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: Method
  fullName: DiagramModel.Components.Method
  type: Class
  source:
    id: Method
    path: ''
    startLine: 1189
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: 'public class Method : Component, IVisibleComponent'
    content.vb: >-
      Public Class Method
          Inherits Component
          Implements IVisibleComponent
  inheritance:
  - System.Object
  - DiagramModel.Components.Component
  implements:
  - DiagramModel.Components.IVisibleComponent
  inheritedMembers:
  - DiagramModel.Components.Component.children
  - DiagramModel.Components.Component.Parent
  - DiagramModel.Components.Component.Children
  - DiagramModel.Components.Component.ValidChildrenTypes
  - DiagramModel.Components.Component.Name
  - DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  - DiagramModel.Components.Component.FindChild(System.String,System.String)
  - DiagramModel.Components.Component.GetTypeFilteredChildren``1
  - DiagramModel.Components.Component.GetUniqueChild``1
  - DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DiagramModel.Components.Method.#ctor(System.String,DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Method.#ctor(System.String,DiagramModel.Components.Component)
  id: '#ctor(System.String,DiagramModel.Components.Component)'
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: Method(String, Component)
  nameWithType: Method.Method(String, Component)
  fullName: DiagramModel.Components.Method.Method(System.String, DiagramModel.Components.Component)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1192
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public Method(string name, Component parent)
    parameters:
    - id: name
      type: System.String
    - id: parent
      type: DiagramModel.Components.Component
    content.vb: Public Sub New(name As String, parent As Component)
  overload: DiagramModel.Components.Method.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.TypeName
  commentId: P:DiagramModel.Components.Method.TypeName
  id: TypeName
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: TypeName
  nameWithType: Method.TypeName
  fullName: DiagramModel.Components.Method.TypeName
  type: Property
  source:
    id: TypeName
    path: ''
    startLine: 1193
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public static string TypeName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property TypeName As String
  overload: DiagramModel.Components.Method.TypeName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DiagramModel.Components.Method.GetVisibility
  commentId: M:DiagramModel.Components.Method.GetVisibility
  id: GetVisibility
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetVisibility()
  nameWithType: Method.GetVisibility()
  fullName: DiagramModel.Components.Method.GetVisibility()
  type: Method
  source:
    id: GetVisibility
    path: ''
    startLine: 1199
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  summary: "\nIf visibility is not defined return default visibility.\n"
  example: []
  syntax:
    content: public Visibility GetVisibility()
    return:
      type: DiagramModel.Components.Visibility
      description: Defined value of visibility or default.
    content.vb: Public Function GetVisibility As Visibility
  overload: DiagramModel.Components.Method.GetVisibility*
  implements:
  - DiagramModel.Components.IVisibleComponent.GetVisibility
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.GetReturnType
  commentId: M:DiagramModel.Components.Method.GetReturnType
  id: GetReturnType
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetReturnType()
  nameWithType: Method.GetReturnType()
  fullName: DiagramModel.Components.Method.GetReturnType()
  type: Method
  source:
    id: GetReturnType
    path: ''
    startLine: 1205
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  summary: "\nIf return type is not defined return default return type.\n"
  example: []
  syntax:
    content: public ReturnType GetReturnType()
    return:
      type: DiagramModel.Components.ReturnType
      description: Defined value of return type or null.
    content.vb: Public Function GetReturnType As ReturnType
  overload: DiagramModel.Components.Method.GetReturnType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.GetParameters
  commentId: M:DiagramModel.Components.Method.GetParameters
  id: GetParameters
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetParameters()
  nameWithType: Method.GetParameters()
  fullName: DiagramModel.Components.Method.GetParameters()
  type: Method
  source:
    id: GetParameters
    path: ''
    startLine: 1206
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public IReadOnlyList<Parameter> GetParameters()
    return:
      type: IReadOnlyList{DiagramModel.Components.Parameter}
    content.vb: Public Function GetParameters As IReadOnlyList(Of Parameter)
  overload: DiagramModel.Components.Method.GetParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.GetRequiredParameters
  commentId: M:DiagramModel.Components.Method.GetRequiredParameters
  id: GetRequiredParameters
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetRequiredParameters()
  nameWithType: Method.GetRequiredParameters()
  fullName: DiagramModel.Components.Method.GetRequiredParameters()
  type: Method
  source:
    id: GetRequiredParameters
    path: ''
    startLine: 1215
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public IReadOnlyList<Parameter> GetRequiredParameters()
    return:
      type: IReadOnlyList{DiagramModel.Components.Parameter}
    content.vb: Public Function GetRequiredParameters As IReadOnlyList(Of Parameter)
  overload: DiagramModel.Components.Method.GetRequiredParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.GetOptionalParameters
  commentId: M:DiagramModel.Components.Method.GetOptionalParameters
  id: GetOptionalParameters
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetOptionalParameters()
  nameWithType: Method.GetOptionalParameters()
  fullName: DiagramModel.Components.Method.GetOptionalParameters()
  type: Method
  source:
    id: GetOptionalParameters
    path: ''
    startLine: 1218
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public IReadOnlyList<Parameter> GetOptionalParameters()
    return:
      type: IReadOnlyList{DiagramModel.Components.Parameter}
    content.vb: Public Function GetOptionalParameters As IReadOnlyList(Of Parameter)
  overload: DiagramModel.Components.Method.GetOptionalParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Method.GetUniqueTypeName
  commentId: M:DiagramModel.Components.Method.GetUniqueTypeName
  id: GetUniqueTypeName
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: GetUniqueTypeName()
  nameWithType: Method.GetUniqueTypeName()
  fullName: DiagramModel.Components.Method.GetUniqueTypeName()
  type: Method
  source:
    id: GetUniqueTypeName
    path: ''
    startLine: 1221
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public override string GetUniqueTypeName()
    return:
      type: System.String
    content.vb: Public Overrides Function GetUniqueTypeName As String
  overridden: DiagramModel.Components.Component.GetUniqueTypeName
  overload: DiagramModel.Components.Method.GetUniqueTypeName*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DiagramModel.Components.Method.AddChild(DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Method.AddChild(DiagramModel.Components.Component)
  id: AddChild(DiagramModel.Components.Component)
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: AddChild(Component)
  nameWithType: Method.AddChild(Component)
  fullName: DiagramModel.Components.Method.AddChild(DiagramModel.Components.Component)
  type: Method
  source:
    id: AddChild
    path: ''
    startLine: 1223
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public override void AddChild(Component child)
    parameters:
    - id: child
      type: DiagramModel.Components.Component
    content.vb: Public Overrides Sub AddChild(child As Component)
  overridden: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  overload: DiagramModel.Components.Method.AddChild*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DiagramModel.Components.Method.Clone
  commentId: M:DiagramModel.Components.Method.Clone
  id: Clone
  parent: DiagramModel.Components.Method
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Method.Clone()
  fullName: DiagramModel.Components.Method.Clone()
  type: Method
  source:
    id: Clone
    path: ''
    startLine: 1244
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public override Component Clone()
    return:
      type: DiagramModel.Components.Component
    content.vb: Public Overrides Function Clone As Component
  overridden: DiagramModel.Components.Component.Clone
  overload: DiagramModel.Components.Method.Clone*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: DiagramModel.Components
  commentId: N:DiagramModel.Components
  name: DiagramModel.Components
  nameWithType: DiagramModel.Components
  fullName: DiagramModel.Components
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DiagramModel.Components.Component
  commentId: T:DiagramModel.Components.Component
  parent: DiagramModel.Components
  name: Component
  nameWithType: Component
  fullName: DiagramModel.Components.Component
- uid: DiagramModel.Components.IVisibleComponent
  commentId: T:DiagramModel.Components.IVisibleComponent
  parent: DiagramModel.Components
  name: IVisibleComponent
  nameWithType: IVisibleComponent
  fullName: DiagramModel.Components.IVisibleComponent
- uid: DiagramModel.Components.Component.children
  commentId: F:DiagramModel.Components.Component.children
  parent: DiagramModel.Components.Component
  name: children
  nameWithType: Component.children
  fullName: DiagramModel.Components.Component.children
- uid: DiagramModel.Components.Component.Parent
  commentId: P:DiagramModel.Components.Component.Parent
  parent: DiagramModel.Components.Component
  name: Parent
  nameWithType: Component.Parent
  fullName: DiagramModel.Components.Component.Parent
- uid: DiagramModel.Components.Component.Children
  commentId: P:DiagramModel.Components.Component.Children
  parent: DiagramModel.Components.Component
  name: Children
  nameWithType: Component.Children
  fullName: DiagramModel.Components.Component.Children
- uid: DiagramModel.Components.Component.ValidChildrenTypes
  commentId: P:DiagramModel.Components.Component.ValidChildrenTypes
  parent: DiagramModel.Components.Component
  name: ValidChildrenTypes
  nameWithType: Component.ValidChildrenTypes
  fullName: DiagramModel.Components.Component.ValidChildrenTypes
- uid: DiagramModel.Components.Component.Name
  commentId: P:DiagramModel.Components.Component.Name
  parent: DiagramModel.Components.Component
  name: Name
  nameWithType: Component.Name
  fullName: DiagramModel.Components.Component.Name
- uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  commentId: M:DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  parent: DiagramModel.Components.Component
  isExternal: true
  name: TryDeleteChild(String, String)
  nameWithType: Component.TryDeleteChild(String, String)
  fullName: DiagramModel.Components.Component.TryDeleteChild(System.String, System.String)
  spec.csharp:
  - uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
    name: TryDeleteChild
    nameWithType: Component.TryDeleteChild
    fullName: DiagramModel.Components.Component.TryDeleteChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
    name: TryDeleteChild
    nameWithType: Component.TryDeleteChild
    fullName: DiagramModel.Components.Component.TryDeleteChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
  commentId: M:DiagramModel.Components.Component.FindChild(System.String,System.String)
  parent: DiagramModel.Components.Component
  isExternal: true
  name: FindChild(String, String)
  nameWithType: Component.FindChild(String, String)
  fullName: DiagramModel.Components.Component.FindChild(System.String, System.String)
  spec.csharp:
  - uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
    name: FindChild
    nameWithType: Component.FindChild
    fullName: DiagramModel.Components.Component.FindChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
    name: FindChild
    nameWithType: Component.FindChild
    fullName: DiagramModel.Components.Component.FindChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
  commentId: M:DiagramModel.Components.Component.GetTypeFilteredChildren``1
  parent: DiagramModel.Components.Component
  name: GetTypeFilteredChildren<T>()
  nameWithType: Component.GetTypeFilteredChildren<T>()
  fullName: DiagramModel.Components.Component.GetTypeFilteredChildren<T>()
  nameWithType.vb: Component.GetTypeFilteredChildren(Of T)()
  fullName.vb: DiagramModel.Components.Component.GetTypeFilteredChildren(Of T)()
  name.vb: GetTypeFilteredChildren(Of T)()
  spec.csharp:
  - uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
    name: GetTypeFilteredChildren<T>
    nameWithType: Component.GetTypeFilteredChildren<T>
    fullName: DiagramModel.Components.Component.GetTypeFilteredChildren<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
    name: GetTypeFilteredChildren(Of T)
    nameWithType: Component.GetTypeFilteredChildren(Of T)
    fullName: DiagramModel.Components.Component.GetTypeFilteredChildren(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.GetUniqueChild``1
  commentId: M:DiagramModel.Components.Component.GetUniqueChild``1
  parent: DiagramModel.Components.Component
  name: GetUniqueChild<T>()
  nameWithType: Component.GetUniqueChild<T>()
  fullName: DiagramModel.Components.Component.GetUniqueChild<T>()
  nameWithType.vb: Component.GetUniqueChild(Of T)()
  fullName.vb: DiagramModel.Components.Component.GetUniqueChild(Of T)()
  name.vb: GetUniqueChild(Of T)()
  spec.csharp:
  - uid: DiagramModel.Components.Component.GetUniqueChild``1
    name: GetUniqueChild<T>
    nameWithType: Component.GetUniqueChild<T>
    fullName: DiagramModel.Components.Component.GetUniqueChild<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.GetUniqueChild``1
    name: GetUniqueChild(Of T)
    nameWithType: Component.GetUniqueChild(Of T)
    fullName: DiagramModel.Components.Component.GetUniqueChild(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  parent: DiagramModel.Components.Component
  name: CloneChildrenInto(Component)
  nameWithType: Component.CloneChildrenInto(Component)
  fullName: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  spec.csharp:
  - uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
    name: CloneChildrenInto
    nameWithType: Component.CloneChildrenInto
    fullName: DiagramModel.Components.Component.CloneChildrenInto
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
    name: CloneChildrenInto
    nameWithType: Component.CloneChildrenInto
    fullName: DiagramModel.Components.Component.CloneChildrenInto
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiagramModel.Components.Method.#ctor*
  commentId: Overload:DiagramModel.Components.Method.#ctor
  name: Method
  nameWithType: Method.Method
  fullName: DiagramModel.Components.Method.Method
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DiagramModel.Components.Method.TypeName*
  commentId: Overload:DiagramModel.Components.Method.TypeName
  name: TypeName
  nameWithType: Method.TypeName
  fullName: DiagramModel.Components.Method.TypeName
- uid: DiagramModel.Components.Method.GetVisibility*
  commentId: Overload:DiagramModel.Components.Method.GetVisibility
  name: GetVisibility
  nameWithType: Method.GetVisibility
  fullName: DiagramModel.Components.Method.GetVisibility
- uid: DiagramModel.Components.IVisibleComponent.GetVisibility
  commentId: M:DiagramModel.Components.IVisibleComponent.GetVisibility
  parent: DiagramModel.Components.IVisibleComponent
  name: GetVisibility()
  nameWithType: IVisibleComponent.GetVisibility()
  fullName: DiagramModel.Components.IVisibleComponent.GetVisibility()
  spec.csharp:
  - uid: DiagramModel.Components.IVisibleComponent.GetVisibility
    name: GetVisibility
    nameWithType: IVisibleComponent.GetVisibility
    fullName: DiagramModel.Components.IVisibleComponent.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.IVisibleComponent.GetVisibility
    name: GetVisibility
    nameWithType: IVisibleComponent.GetVisibility
    fullName: DiagramModel.Components.IVisibleComponent.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Visibility
  commentId: T:DiagramModel.Components.Visibility
  parent: DiagramModel.Components
  name: Visibility
  nameWithType: Visibility
  fullName: DiagramModel.Components.Visibility
- uid: DiagramModel.Components.Method.GetReturnType*
  commentId: Overload:DiagramModel.Components.Method.GetReturnType
  name: GetReturnType
  nameWithType: Method.GetReturnType
  fullName: DiagramModel.Components.Method.GetReturnType
- uid: DiagramModel.Components.ReturnType
  commentId: T:DiagramModel.Components.ReturnType
  parent: DiagramModel.Components
  name: ReturnType
  nameWithType: ReturnType
  fullName: DiagramModel.Components.ReturnType
- uid: DiagramModel.Components.Method.GetParameters*
  commentId: Overload:DiagramModel.Components.Method.GetParameters
  name: GetParameters
  nameWithType: Method.GetParameters
  fullName: DiagramModel.Components.Method.GetParameters
- uid: IReadOnlyList{DiagramModel.Components.Parameter}
  commentId: '!:IReadOnlyList{DiagramModel.Components.Parameter}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Parameter>
  nameWithType: IReadOnlyList<Parameter>
  fullName: IReadOnlyList<DiagramModel.Components.Parameter>
  nameWithType.vb: IReadOnlyList(Of Parameter)
  fullName.vb: IReadOnlyList(Of DiagramModel.Components.Parameter)
  name.vb: IReadOnlyList(Of Parameter)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiagramModel.Components.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: DiagramModel.Components.Parameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiagramModel.Components.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: DiagramModel.Components.Parameter
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Method.GetRequiredParameters*
  commentId: Overload:DiagramModel.Components.Method.GetRequiredParameters
  name: GetRequiredParameters
  nameWithType: Method.GetRequiredParameters
  fullName: DiagramModel.Components.Method.GetRequiredParameters
- uid: DiagramModel.Components.Method.GetOptionalParameters*
  commentId: Overload:DiagramModel.Components.Method.GetOptionalParameters
  name: GetOptionalParameters
  nameWithType: Method.GetOptionalParameters
  fullName: DiagramModel.Components.Method.GetOptionalParameters
- uid: DiagramModel.Components.Component.GetUniqueTypeName
  commentId: M:DiagramModel.Components.Component.GetUniqueTypeName
  parent: DiagramModel.Components.Component
  name: GetUniqueTypeName()
  nameWithType: Component.GetUniqueTypeName()
  fullName: DiagramModel.Components.Component.GetUniqueTypeName()
  spec.csharp:
  - uid: DiagramModel.Components.Component.GetUniqueTypeName
    name: GetUniqueTypeName
    nameWithType: Component.GetUniqueTypeName
    fullName: DiagramModel.Components.Component.GetUniqueTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.GetUniqueTypeName
    name: GetUniqueTypeName
    nameWithType: Component.GetUniqueTypeName
    fullName: DiagramModel.Components.Component.GetUniqueTypeName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Method.GetUniqueTypeName*
  commentId: Overload:DiagramModel.Components.Method.GetUniqueTypeName
  name: GetUniqueTypeName
  nameWithType: Method.GetUniqueTypeName
  fullName: DiagramModel.Components.Method.GetUniqueTypeName
- uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  parent: DiagramModel.Components.Component
  name: AddChild(Component)
  nameWithType: Component.AddChild(Component)
  fullName: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  spec.csharp:
  - uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
    name: AddChild
    nameWithType: Component.AddChild
    fullName: DiagramModel.Components.Component.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
    name: AddChild
    nameWithType: Component.AddChild
    fullName: DiagramModel.Components.Component.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Method.AddChild*
  commentId: Overload:DiagramModel.Components.Method.AddChild
  name: AddChild
  nameWithType: Method.AddChild
  fullName: DiagramModel.Components.Method.AddChild
- uid: DiagramModel.Components.Component.Clone
  commentId: M:DiagramModel.Components.Component.Clone
  parent: DiagramModel.Components.Component
  name: Clone()
  nameWithType: Component.Clone()
  fullName: DiagramModel.Components.Component.Clone()
  spec.csharp:
  - uid: DiagramModel.Components.Component.Clone
    name: Clone
    nameWithType: Component.Clone
    fullName: DiagramModel.Components.Component.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.Clone
    name: Clone
    nameWithType: Component.Clone
    fullName: DiagramModel.Components.Component.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Method.Clone*
  commentId: Overload:DiagramModel.Components.Method.Clone
  name: Clone
  nameWithType: Method.Clone
  fullName: DiagramModel.Components.Method.Clone
