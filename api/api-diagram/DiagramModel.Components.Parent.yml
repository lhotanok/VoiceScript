### YamlMime:ManagedReference
items:
- uid: DiagramModel.Components.Parent
  commentId: T:DiagramModel.Components.Parent
  id: Parent
  parent: DiagramModel.Components
  children:
  - DiagramModel.Components.Parent.#ctor(System.String,DiagramModel.Components.Component)
  - DiagramModel.Components.Parent.Clone
  - DiagramModel.Components.Parent.TypeName
  - DiagramModel.Components.Parent.UniqueTypeName
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Parent
  fullName: DiagramModel.Components.Parent
  type: Class
  source:
    id: Parent
    path: ''
    startLine: 1593
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: 'public class Parent : Component'
    content.vb: >-
      Public Class Parent
          Inherits Component
  inheritance:
  - System.Object
  - DiagramModel.Components.Component
  inheritedMembers:
  - DiagramModel.Components.Component.children
  - DiagramModel.Components.Component.Parent
  - DiagramModel.Components.Component.Children
  - DiagramModel.Components.Component.ValidChildrenTypes
  - DiagramModel.Components.Component.Name
  - DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  - DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  - DiagramModel.Components.Component.FindChild(System.String,System.String)
  - DiagramModel.Components.Component.GetTypeFilteredChildren``1
  - DiagramModel.Components.Component.GetUniqueChild``1
  - DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DiagramModel.Components.Parent.#ctor(System.String,DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Parent.#ctor(System.String,DiagramModel.Components.Component)
  id: '#ctor(System.String,DiagramModel.Components.Component)'
  parent: DiagramModel.Components.Parent
  langs:
  - csharp
  - vb
  name: Parent(String, Component)
  nameWithType: Parent.Parent(String, Component)
  fullName: DiagramModel.Components.Parent.Parent(System.String, DiagramModel.Components.Component)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1596
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public Parent(string name, Component parent)
    parameters:
    - id: name
      type: System.String
    - id: parent
      type: DiagramModel.Components.Component
    content.vb: Public Sub New(name As String, parent As Component)
  overload: DiagramModel.Components.Parent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Components.Parent.TypeName
  commentId: P:DiagramModel.Components.Parent.TypeName
  id: TypeName
  parent: DiagramModel.Components.Parent
  langs:
  - csharp
  - vb
  name: TypeName
  nameWithType: Parent.TypeName
  fullName: DiagramModel.Components.Parent.TypeName
  type: Property
  source:
    id: TypeName
    path: ''
    startLine: 1597
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public static string TypeName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property TypeName As String
  overload: DiagramModel.Components.Parent.TypeName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DiagramModel.Components.Parent.Clone
  commentId: M:DiagramModel.Components.Parent.Clone
  id: Clone
  parent: DiagramModel.Components.Parent
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Parent.Clone()
  fullName: DiagramModel.Components.Parent.Clone()
  type: Method
  source:
    id: Clone
    path: ''
    startLine: 1599
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public override Component Clone()
    return:
      type: DiagramModel.Components.Component
    content.vb: Public Overrides Function Clone As Component
  overridden: DiagramModel.Components.Component.Clone
  overload: DiagramModel.Components.Parent.Clone*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DiagramModel.Components.Parent.UniqueTypeName
  commentId: P:DiagramModel.Components.Parent.UniqueTypeName
  id: UniqueTypeName
  parent: DiagramModel.Components.Parent
  langs:
  - csharp
  - vb
  name: UniqueTypeName
  nameWithType: Parent.UniqueTypeName
  fullName: DiagramModel.Components.Parent.UniqueTypeName
  type: Property
  source:
    id: UniqueTypeName
    path: ''
    startLine: 1601
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Components
  syntax:
    content: public override string UniqueTypeName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property UniqueTypeName As String
  overridden: DiagramModel.Components.Component.UniqueTypeName
  overload: DiagramModel.Components.Parent.UniqueTypeName*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: DiagramModel.Components
  commentId: N:DiagramModel.Components
  name: DiagramModel.Components
  nameWithType: DiagramModel.Components
  fullName: DiagramModel.Components
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DiagramModel.Components.Component
  commentId: T:DiagramModel.Components.Component
  parent: DiagramModel.Components
  name: Component
  nameWithType: Component
  fullName: DiagramModel.Components.Component
- uid: DiagramModel.Components.Component.children
  commentId: F:DiagramModel.Components.Component.children
  parent: DiagramModel.Components.Component
  name: children
  nameWithType: Component.children
  fullName: DiagramModel.Components.Component.children
- uid: DiagramModel.Components.Component.Parent
  commentId: P:DiagramModel.Components.Component.Parent
  parent: DiagramModel.Components.Component
  name: Parent
  nameWithType: Component.Parent
  fullName: DiagramModel.Components.Component.Parent
- uid: DiagramModel.Components.Component.Children
  commentId: P:DiagramModel.Components.Component.Children
  parent: DiagramModel.Components.Component
  name: Children
  nameWithType: Component.Children
  fullName: DiagramModel.Components.Component.Children
- uid: DiagramModel.Components.Component.ValidChildrenTypes
  commentId: P:DiagramModel.Components.Component.ValidChildrenTypes
  parent: DiagramModel.Components.Component
  name: ValidChildrenTypes
  nameWithType: Component.ValidChildrenTypes
  fullName: DiagramModel.Components.Component.ValidChildrenTypes
- uid: DiagramModel.Components.Component.Name
  commentId: P:DiagramModel.Components.Component.Name
  parent: DiagramModel.Components.Component
  name: Name
  nameWithType: Component.Name
  fullName: DiagramModel.Components.Component.Name
- uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  parent: DiagramModel.Components.Component
  name: AddChild(Component)
  nameWithType: Component.AddChild(Component)
  fullName: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
  spec.csharp:
  - uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
    name: AddChild
    nameWithType: Component.AddChild
    fullName: DiagramModel.Components.Component.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.AddChild(DiagramModel.Components.Component)
    name: AddChild
    nameWithType: Component.AddChild
    fullName: DiagramModel.Components.Component.AddChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  commentId: M:DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
  parent: DiagramModel.Components.Component
  isExternal: true
  name: TryDeleteChild(String, String)
  nameWithType: Component.TryDeleteChild(String, String)
  fullName: DiagramModel.Components.Component.TryDeleteChild(System.String, System.String)
  spec.csharp:
  - uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
    name: TryDeleteChild
    nameWithType: Component.TryDeleteChild
    fullName: DiagramModel.Components.Component.TryDeleteChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.TryDeleteChild(System.String,System.String)
    name: TryDeleteChild
    nameWithType: Component.TryDeleteChild
    fullName: DiagramModel.Components.Component.TryDeleteChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
  commentId: M:DiagramModel.Components.Component.FindChild(System.String,System.String)
  parent: DiagramModel.Components.Component
  isExternal: true
  name: FindChild(String, String)
  nameWithType: Component.FindChild(String, String)
  fullName: DiagramModel.Components.Component.FindChild(System.String, System.String)
  spec.csharp:
  - uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
    name: FindChild
    nameWithType: Component.FindChild
    fullName: DiagramModel.Components.Component.FindChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.FindChild(System.String,System.String)
    name: FindChild
    nameWithType: Component.FindChild
    fullName: DiagramModel.Components.Component.FindChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
  commentId: M:DiagramModel.Components.Component.GetTypeFilteredChildren``1
  parent: DiagramModel.Components.Component
  name: GetTypeFilteredChildren<T>()
  nameWithType: Component.GetTypeFilteredChildren<T>()
  fullName: DiagramModel.Components.Component.GetTypeFilteredChildren<T>()
  nameWithType.vb: Component.GetTypeFilteredChildren(Of T)()
  fullName.vb: DiagramModel.Components.Component.GetTypeFilteredChildren(Of T)()
  name.vb: GetTypeFilteredChildren(Of T)()
  spec.csharp:
  - uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
    name: GetTypeFilteredChildren<T>
    nameWithType: Component.GetTypeFilteredChildren<T>
    fullName: DiagramModel.Components.Component.GetTypeFilteredChildren<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.GetTypeFilteredChildren``1
    name: GetTypeFilteredChildren(Of T)
    nameWithType: Component.GetTypeFilteredChildren(Of T)
    fullName: DiagramModel.Components.Component.GetTypeFilteredChildren(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.GetUniqueChild``1
  commentId: M:DiagramModel.Components.Component.GetUniqueChild``1
  parent: DiagramModel.Components.Component
  name: GetUniqueChild<T>()
  nameWithType: Component.GetUniqueChild<T>()
  fullName: DiagramModel.Components.Component.GetUniqueChild<T>()
  nameWithType.vb: Component.GetUniqueChild(Of T)()
  fullName.vb: DiagramModel.Components.Component.GetUniqueChild(Of T)()
  name.vb: GetUniqueChild(Of T)()
  spec.csharp:
  - uid: DiagramModel.Components.Component.GetUniqueChild``1
    name: GetUniqueChild<T>
    nameWithType: Component.GetUniqueChild<T>
    fullName: DiagramModel.Components.Component.GetUniqueChild<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.GetUniqueChild``1
    name: GetUniqueChild(Of T)
    nameWithType: Component.GetUniqueChild(Of T)
    fullName: DiagramModel.Components.Component.GetUniqueChild(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  commentId: M:DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  parent: DiagramModel.Components.Component
  name: CloneChildrenInto(Component)
  nameWithType: Component.CloneChildrenInto(Component)
  fullName: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
  spec.csharp:
  - uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
    name: CloneChildrenInto
    nameWithType: Component.CloneChildrenInto
    fullName: DiagramModel.Components.Component.CloneChildrenInto
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.CloneChildrenInto(DiagramModel.Components.Component)
    name: CloneChildrenInto
    nameWithType: Component.CloneChildrenInto
    fullName: DiagramModel.Components.Component.CloneChildrenInto
  - name: (
    nameWithType: (
    fullName: (
  - uid: DiagramModel.Components.Component
    name: Component
    nameWithType: Component
    fullName: DiagramModel.Components.Component
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiagramModel.Components.Parent.#ctor*
  commentId: Overload:DiagramModel.Components.Parent.#ctor
  name: Parent
  nameWithType: Parent.Parent
  fullName: DiagramModel.Components.Parent.Parent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DiagramModel.Components.Parent.TypeName*
  commentId: Overload:DiagramModel.Components.Parent.TypeName
  name: TypeName
  nameWithType: Parent.TypeName
  fullName: DiagramModel.Components.Parent.TypeName
- uid: DiagramModel.Components.Component.Clone
  commentId: M:DiagramModel.Components.Component.Clone
  parent: DiagramModel.Components.Component
  name: Clone()
  nameWithType: Component.Clone()
  fullName: DiagramModel.Components.Component.Clone()
  spec.csharp:
  - uid: DiagramModel.Components.Component.Clone
    name: Clone
    nameWithType: Component.Clone
    fullName: DiagramModel.Components.Component.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiagramModel.Components.Component.Clone
    name: Clone
    nameWithType: Component.Clone
    fullName: DiagramModel.Components.Component.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Components.Parent.Clone*
  commentId: Overload:DiagramModel.Components.Parent.Clone
  name: Clone
  nameWithType: Parent.Clone
  fullName: DiagramModel.Components.Parent.Clone
- uid: DiagramModel.Components.Component.UniqueTypeName
  commentId: P:DiagramModel.Components.Component.UniqueTypeName
  parent: DiagramModel.Components.Component
  name: UniqueTypeName
  nameWithType: Component.UniqueTypeName
  fullName: DiagramModel.Components.Component.UniqueTypeName
- uid: DiagramModel.Components.Parent.UniqueTypeName*
  commentId: Overload:DiagramModel.Components.Parent.UniqueTypeName
  name: UniqueTypeName
  nameWithType: Parent.UniqueTypeName
  fullName: DiagramModel.Components.Parent.UniqueTypeName
