### YamlMime:ManagedReference
items:
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat
  commentId: T:DiagramModel.Commands.LanguageFormats.LanguageFormat
  id: LanguageFormat
  parent: DiagramModel.Commands.LanguageFormats
  children:
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats(System.String)
  - DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
  langs:
  - csharp
  - vb
  name: LanguageFormat
  nameWithType: LanguageFormat
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat
  type: Class
  source:
    id: LanguageFormat
    path: ''
    startLine: 886
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nRepresents language settings for conversion of commands into diagram model.\n"
  example: []
  syntax:
    content: public abstract class LanguageFormat
    content.vb: Public MustInherit Class LanguageFormat
  inheritance:
  - System.Object
  derivedClasses:
  - DiagramModel.Commands.LanguageFormats.CzechFormat
  - DiagramModel.Commands.LanguageFormats.EnglishFormat
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
  id: Code
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: LanguageFormat.Code
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
  type: Property
  source:
    id: Code
    path: ''
    startLine: 891
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nLanguage standardized code.\n"
  example: []
  syntax:
    content: public abstract string Code { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property Code As String
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.Code*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
  id: CommandFormats
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: CommandFormats
  nameWithType: LanguageFormat.CommandFormats
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
  type: Property
  source:
    id: CommandFormats
    path: ''
    startLine: 898
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nRepresents mapping of default command name on alternative command names.\nKey is represented by command&apos;s default format (see <xref href=\"DiagramModel.Commands.AddCommand.DefaultFormat\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"DiagramModel.Commands.EditCommand.DefaultFormat\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"DiagramModel.Commands.DeleteCommand.DefaultFormat\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public abstract Dictionary<string, List<string>> CommandFormats { get; }
    parameters: []
    return:
      type: Dictionary{System.String,List{System.String}}
    content.vb: Public MustOverride ReadOnly Property CommandFormats As Dictionary(Of String, List(Of String))
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
  id: DelimiterFormat
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: DelimiterFormat
  nameWithType: LanguageFormat.DelimiterFormat
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
  type: Property
  source:
    id: DelimiterFormat
    path: ''
    startLine: 903
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nFormat of delimiter command.\n"
  example: []
  syntax:
    content: public abstract string DelimiterFormat { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property DelimiterFormat As String
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
  id: ComponentNameFormat
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: ComponentNameFormat
  nameWithType: LanguageFormat.ComponentNameFormat
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
  type: Property
  source:
    id: ComponentNameFormat
    path: ''
    startLine: 909
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nRepresents component name for accessing <xref href=\"DiagramModel.Components.Component.Name\" data-throw-if-not-resolved=\"false\"></xref>\nfrom commands. It is needed for edit name command. Is &quot;name&quot; by default.\n"
  example: []
  syntax:
    content: public virtual string ComponentNameFormat { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property ComponentNameFormat As String
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
  id: ComponentNames
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: ComponentNames
  nameWithType: LanguageFormat.ComponentNames
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
  type: Property
  source:
    id: ComponentNames
    path: ''
    startLine: 917
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nVarious component names mapped on default component names.\nKeys are valid component names that can be used for component \nrepresentation in the individual commands and values are default\ncomponent names corresponding to key names.\n"
  example: []
  syntax:
    content: public abstract Dictionary<string, string> ComponentNames { get; }
    parameters: []
    return:
      type: Dictionary{System.String,System.String}
    content.vb: Public MustOverride ReadOnly Property ComponentNames As Dictionary(Of String, String)
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
  commentId: P:DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
  id: TargetValuesToReplace
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: TargetValuesToReplace
  nameWithType: LanguageFormat.TargetValuesToReplace
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
  type: Property
  source:
    id: TargetValuesToReplace
    path: ''
    startLine: 926
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nSpecial values used in target value parts of the command that should\nbe replaced during command parsing phase. The original values get\nreplaced by these values and they are no longer accessible from \nthe parsed commands. Keys stand for the actual values used in commands\nand values are replacement strings.\n"
  example: []
  syntax:
    content: public virtual Dictionary<string, string> TargetValuesToReplace { get; }
    parameters: []
    return:
      type: Dictionary{System.String,System.String}
    content.vb: Public Overridable ReadOnly Property TargetValuesToReplace As Dictionary(Of String, String)
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats(System.String)
  commentId: M:DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats(System.String)
  id: GetFormats(System.String)
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: GetFormats(String)
  nameWithType: LanguageFormat.GetFormats(String)
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats(System.String)
  type: Method
  source:
    id: GetFormats
    path: ''
    startLine: 934
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nGet list of possible command formats.\n"
  example: []
  syntax:
    content: public List<string> GetFormats(string commandDefault)
    parameters:
    - id: commandDefault
      type: System.String
      description: ''
    return:
      type: List{System.String}
      description: >-
        List of formats or null

        if command&apos;s default format is unknown.
    content.vb: Public Function GetFormats(commandDefault As String) As List(Of String)
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats
  commentId: M:DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats
  id: GetAllCommandFormats
  parent: DiagramModel.Commands.LanguageFormats.LanguageFormat
  langs:
  - csharp
  - vb
  name: GetAllCommandFormats()
  nameWithType: LanguageFormat.GetAllCommandFormats()
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats()
  type: Method
  source:
    id: GetAllCommandFormats
    path: ''
    startLine: 946
  assemblies:
  - cs.temp.dll
  namespace: DiagramModel.Commands.LanguageFormats
  summary: "\nExtracts all possible command names that can be used\nfor commands representation. Merges all command types.\n"
  example: []
  syntax:
    content: public IList<string> GetAllCommandFormats()
    return:
      type: IList{System.String}
      description: ''
    content.vb: Public Function GetAllCommandFormats As IList(Of String)
  overload: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DiagramModel.Commands.LanguageFormats
  commentId: N:DiagramModel.Commands.LanguageFormats
  name: DiagramModel.Commands.LanguageFormats
  nameWithType: DiagramModel.Commands.LanguageFormats
  fullName: DiagramModel.Commands.LanguageFormats
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.Code*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
  name: Code
  nameWithType: LanguageFormat.Code
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.Code
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DiagramModel.Commands.AddCommand.DefaultFormat
  commentId: P:DiagramModel.Commands.AddCommand.DefaultFormat
  isExternal: true
- uid: DiagramModel.Commands.EditCommand.DefaultFormat
  commentId: P:DiagramModel.Commands.EditCommand.DefaultFormat
  isExternal: true
- uid: DiagramModel.Commands.DeleteCommand.DefaultFormat
  commentId: P:DiagramModel.Commands.DeleteCommand.DefaultFormat
  isExternal: true
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
  name: CommandFormats
  nameWithType: LanguageFormat.CommandFormats
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.CommandFormats
- uid: Dictionary{System.String,List{System.String}}
  commentId: '!:Dictionary{System.String,List{System.String}}'
  definition: Dictionary`2
  name: Dictionary<String, List<String>>
  nameWithType: Dictionary<String, List<String>>
  fullName: Dictionary<System.String, List<System.String>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullName.vb: Dictionary(Of System.String, List(Of System.String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
  name: DelimiterFormat
  nameWithType: LanguageFormat.DelimiterFormat
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.DelimiterFormat
- uid: DiagramModel.Components.Component.Name
  commentId: P:DiagramModel.Components.Component.Name
  parent: DiagramModel.Components.Component
  name: Name
  nameWithType: Component.Name
  fullName: DiagramModel.Components.Component.Name
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
  name: ComponentNameFormat
  nameWithType: LanguageFormat.ComponentNameFormat
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNameFormat
- uid: DiagramModel.Components.Component
  commentId: T:DiagramModel.Components.Component
  parent: DiagramModel.Components
  name: Component
  nameWithType: Component
  fullName: DiagramModel.Components.Component
- uid: DiagramModel.Components
  commentId: N:DiagramModel.Components
  name: DiagramModel.Components
  nameWithType: DiagramModel.Components
  fullName: DiagramModel.Components
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
  name: ComponentNames
  nameWithType: LanguageFormat.ComponentNames
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.ComponentNames
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
  name: TargetValuesToReplace
  nameWithType: LanguageFormat.TargetValuesToReplace
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.TargetValuesToReplace
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats
  name: GetFormats
  nameWithType: LanguageFormat.GetFormats
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetFormats
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats*
  commentId: Overload:DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats
  name: GetAllCommandFormats
  nameWithType: LanguageFormat.GetAllCommandFormats
  fullName: DiagramModel.Commands.LanguageFormats.LanguageFormat.GetAllCommandFormats
- uid: IList{System.String}
  commentId: '!:IList{System.String}'
  definition: IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
