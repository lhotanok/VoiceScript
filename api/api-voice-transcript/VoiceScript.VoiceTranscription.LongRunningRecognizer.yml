### YamlMime:ManagedReference
items:
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer
  commentId: T:VoiceScript.VoiceTranscription.LongRunningRecognizer
  id: LongRunningRecognizer
  parent: VoiceScript.VoiceTranscription
  children:
  - VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor(RecognitionConfig)
  - VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize(RecognitionAudio,System.Action{System.String})
  - VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio,System.Action{System.String})
  langs:
  - csharp
  - vb
  name: LongRunningRecognizer
  nameWithType: LongRunningRecognizer
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer
  type: Class
  source:
    id: LongRunningRecognizer
    path: ''
    startLine: 405
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.VoiceTranscription
  summary: "\nProvides access to Google Cloud Speech long running operations API.\n"
  example: []
  syntax:
    content: public class LongRunningRecognizer
    content.vb: Public Class LongRunningRecognizer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor(RecognitionConfig)
  commentId: M:VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor(RecognitionConfig)
  id: '#ctor(RecognitionConfig)'
  parent: VoiceScript.VoiceTranscription.LongRunningRecognizer
  langs:
  - csharp
  - vb
  name: LongRunningRecognizer(RecognitionConfig)
  nameWithType: LongRunningRecognizer.LongRunningRecognizer(RecognitionConfig)
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizer(RecognitionConfig)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 409
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.VoiceTranscription
  syntax:
    content: public LongRunningRecognizer(RecognitionConfig configuration)
    parameters:
    - id: configuration
      type: RecognitionConfig
    content.vb: Public Sub New(configuration As RecognitionConfig)
  overload: VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize(RecognitionAudio,System.Action{System.String})
  commentId: M:VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize(RecognitionAudio,System.Action{System.String})
  id: LongRunningRecognize(RecognitionAudio,System.Action{System.String})
  parent: VoiceScript.VoiceTranscription.LongRunningRecognizer
  langs:
  - csharp
  - vb
  name: LongRunningRecognize(RecognitionAudio, Action<String>)
  nameWithType: LongRunningRecognizer.LongRunningRecognize(RecognitionAudio, Action<String>)
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize(RecognitionAudio, System.Action<System.String>)
  type: Method
  source:
    id: LongRunningRecognize
    path: ''
    startLine: 422
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.VoiceTranscription
  summary: "\nPerforms transcription of the given audio using Google Cloud Speech long running operation.\nPolls until the operation is completed and triggers the provided callback after that.\n"
  example: []
  syntax:
    content: public void LongRunningRecognize(RecognitionAudio audio, Action<string> callback)
    parameters:
    - id: audio
      type: RecognitionAudio
      description: Audio in Google Cloud Speech compatible format.
    - id: callback
      type: System.Action{System.String}
      description: >-
        Function to be called with the individual transcription parts

        from <see cref="!:SpeechRecognitionAlternative.Transcript"></see>.

        Typical use case is for writing transcripted words to the stream.
    content.vb: Public Sub LongRunningRecognize(audio As RecognitionAudio, callback As Action(Of String))
  overload: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize*
  nameWithType.vb: LongRunningRecognizer.LongRunningRecognize(RecognitionAudio, Action(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize(RecognitionAudio, System.Action(Of System.String))
  name.vb: LongRunningRecognize(RecognitionAudio, Action(Of String))
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio,System.Action{System.String})
  commentId: M:VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio,System.Action{System.String})
  id: LongRunningRecognizeAsync(RecognitionAudio,System.Action{System.String})
  parent: VoiceScript.VoiceTranscription.LongRunningRecognizer
  langs:
  - csharp
  - vb
  name: LongRunningRecognizeAsync(RecognitionAudio, Action<String>)
  nameWithType: LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio, Action<String>)
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio, System.Action<System.String>)
  type: Method
  source:
    id: LongRunningRecognizeAsync
    path: ''
    startLine: 445
  assemblies:
  - cs.temp.dll
  namespace: VoiceScript.VoiceTranscription
  summary: "\nPerforms asynchronous transcription of the given audio using Google Cloud Speech\nasync long running operation. Polls until the operation is completed\nand triggers the provided callback after that.\n"
  example: []
  syntax:
    content: public async void LongRunningRecognizeAsync(RecognitionAudio audio, Action<string> callback)
    parameters:
    - id: audio
      type: RecognitionAudio
      description: ''
    - id: callback
      type: System.Action{System.String}
      description: >-
        Function to be called with the individual transcription parts

        from <see cref="!:SpeechRecognitionAlternative.Transcript"></see>.

        Typical use case is for writing transcripted words to the stream.
    content.vb: Public Sub LongRunningRecognizeAsync(audio As RecognitionAudio, callback As Action(Of String))
  overload: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync*
  nameWithType.vb: LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio, Action(Of String))
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync(RecognitionAudio, System.Action(Of System.String))
  name.vb: LongRunningRecognizeAsync(RecognitionAudio, Action(Of String))
references:
- uid: VoiceScript.VoiceTranscription
  commentId: N:VoiceScript.VoiceTranscription
  name: VoiceScript.VoiceTranscription
  nameWithType: VoiceScript.VoiceTranscription
  fullName: VoiceScript.VoiceTranscription
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor*
  commentId: Overload:VoiceScript.VoiceTranscription.LongRunningRecognizer.#ctor
  name: LongRunningRecognizer
  nameWithType: LongRunningRecognizer.LongRunningRecognizer
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizer
- uid: RecognitionConfig
  isExternal: true
  name: RecognitionConfig
  nameWithType: RecognitionConfig
  fullName: RecognitionConfig
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize*
  commentId: Overload:VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize
  name: LongRunningRecognize
  nameWithType: LongRunningRecognizer.LongRunningRecognize
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognize
- uid: RecognitionAudio
  isExternal: true
  name: RecognitionAudio
  nameWithType: RecognitionAudio
  fullName: RecognitionAudio
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: System.Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync*
  commentId: Overload:VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync
  name: LongRunningRecognizeAsync
  nameWithType: LongRunningRecognizer.LongRunningRecognizeAsync
  fullName: VoiceScript.VoiceTranscription.LongRunningRecognizer.LongRunningRecognizeAsync
